{"ast":null,"code":"var _class;\nimport { Transaction } from '../models/transaction.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class WalletService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'YOUR_WALLET_API_URL';\n    this.transactions = [];\n    this.transactions = [new Transaction(0, 0, 500, 'deposit', new Date('2023-09-01T10:00:00')), new Transaction(1, 0, 200, 'withdrawal', new Date('2023-09-02T14:30:00')), new Transaction(2, 1, 1000, 'deposit', new Date('2023-09-01T11:45:00')), new Transaction(3, 2, 300, 'deposit', new Date('2023-09-02T09:15:00')), new Transaction(4, 2, 400, 'withdrawal', new Date('2023-09-02T17:20:00')), new Transaction(5, 3, 800, 'deposit', new Date('2023-09-01T15:10:00')), new Transaction(6, 3, 200, 'withdrawal', new Date('2023-09-02T12:05:00'))];\n  }\n  adjustBalance(userId, amount) {\n    const requestBody = {\n      userId,\n      amount\n    };\n    return this.http.post(`${this.apiUrl}/adjust-balance`, requestBody);\n  }\n  getAllTransactions() {\n    return this.transactions;\n  }\n  getTransactionHistory(userId) {\n    return this.transactions.filter(transaction => transaction.userId == userId);\n    ;\n  }\n}\n_class = WalletService;\n_class.ɵfac = function WalletService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["Transaction","WalletService","constructor","http","apiUrl","transactions","Date","adjustBalance","userId","amount","requestBody","post","getAllTransactions","getTransactionHistory","filter","transaction","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Hi\\Desktop\\botit\\admin-wallet-app\\src\\app\\services\\wallet.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Transaction } from '../models/transaction.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WalletService {\r\n  private apiUrl = 'YOUR_WALLET_API_URL';\r\n  private transactions: Transaction[] = [];\r\n\r\n  constructor(private http: HttpClient) { \r\n    this.transactions = [\r\n      new Transaction(0, 0, 500, 'deposit', new Date('2023-09-01T10:00:00')),\r\n      new Transaction(1, 0, 200, 'withdrawal', new Date('2023-09-02T14:30:00')),\r\n      new Transaction(2, 1, 1000, 'deposit', new Date('2023-09-01T11:45:00')),\r\n      new Transaction(3, 2, 300, 'deposit', new Date('2023-09-02T09:15:00')),\r\n      new Transaction(4, 2, 400, 'withdrawal', new Date('2023-09-02T17:20:00')),    \r\n      new Transaction(5, 3, 800, 'deposit', new Date('2023-09-01T15:10:00')),\r\n      new Transaction(6, 3, 200, 'withdrawal', new Date('2023-09-02T12:05:00')),\r\n    ]\r\n  }\r\n\r\n  adjustBalance(userId: number, amount: number): Observable<number> {\r\n    const requestBody = { userId, amount };\r\n    return this.http.post<number>(`${this.apiUrl}/adjust-balance`, requestBody);\r\n  }\r\n  getAllTransactions():Transaction[] {\r\n    return this.transactions;\r\n  }\r\n  getTransactionHistory(userId: number): Transaction[] {\r\n    return this.transactions.filter((transaction) => transaction.userId == userId);\r\n    ;\r\n  }\r\n\r\n  // getTransactionHistory(userId: string): Observable<any[]> {\r\n  //   return this.http.get<any[]>(`${this.apiUrl}/transaction-history/${userId}`);\r\n  // }\r\n}\r\n"],"mappings":";AAGA,SAASA,WAAW,QAAQ,6BAA6B;;;AAKzD,OAAM,MAAOC,aAAa;EAIxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,MAAM,GAAG,qBAAqB;IAC9B,KAAAC,YAAY,GAAkB,EAAE;IAGtC,IAAI,CAACA,YAAY,GAAG,CAClB,IAAIL,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,SAAS,EAAE,IAAIM,IAAI,CAAC,qBAAqB,CAAC,CAAC,EACtE,IAAIN,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,YAAY,EAAE,IAAIM,IAAI,CAAC,qBAAqB,CAAC,CAAC,EACzE,IAAIN,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAIM,IAAI,CAAC,qBAAqB,CAAC,CAAC,EACvE,IAAIN,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,SAAS,EAAE,IAAIM,IAAI,CAAC,qBAAqB,CAAC,CAAC,EACtE,IAAIN,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,YAAY,EAAE,IAAIM,IAAI,CAAC,qBAAqB,CAAC,CAAC,EACzE,IAAIN,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,SAAS,EAAE,IAAIM,IAAI,CAAC,qBAAqB,CAAC,CAAC,EACtE,IAAIN,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,YAAY,EAAE,IAAIM,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAC1E;EACH;EAEAC,aAAaA,CAACC,MAAc,EAAEC,MAAc;IAC1C,MAAMC,WAAW,GAAG;MAAEF,MAAM;MAAEC;IAAM,CAAE;IACtC,OAAO,IAAI,CAACN,IAAI,CAACQ,IAAI,CAAS,GAAG,IAAI,CAACP,MAAM,iBAAiB,EAAEM,WAAW,CAAC;EAC7E;EACAE,kBAAkBA,CAAA;IAChB,OAAO,IAAI,CAACP,YAAY;EAC1B;EACAQ,qBAAqBA,CAACL,MAAc;IAClC,OAAO,IAAI,CAACH,YAAY,CAACS,MAAM,CAAEC,WAAW,IAAKA,WAAW,CAACP,MAAM,IAAIA,MAAM,CAAC;IAC9E;EACF;;SA1BWP,aAAa;;mBAAbA,MAAa,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAblB,MAAa;EAAAmB,OAAA,EAAbnB,MAAa,CAAAoB,IAAA;EAAAC,UAAA,EAFZ;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}