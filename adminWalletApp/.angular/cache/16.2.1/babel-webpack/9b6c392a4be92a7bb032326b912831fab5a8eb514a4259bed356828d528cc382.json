{"ast":null,"code":"var _class;\nimport { Transaction } from '../models/transaction.model';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class WalletService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/users';\n    this.transactions = [];\n    const options = {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit'\n    };\n    this.transactions = [new Transaction(0, 0, 500, 'deposit', '2023-09-01'), new Transaction(1, 0, 200, 'withdrawal', '2023-09-02'), new Transaction(2, 1, 1000, 'deposit', '2023-09-01'), new Transaction(3, 2, 300, 'deposit', '2023-09-02'), new Transaction(4, 2, 400, 'withdrawal', '2023-09-02'), new Transaction(5, 3, 800, 'deposit', '2023-09-01'), new Transaction(6, 3, 200, 'withdrawal', '2023-09-02')];\n  }\n  // adjustBalance(userId: string, amount: number, adjustType: 'withdrawal' | 'deposit'): Observable<any> {\n  //   const requestBody = { \"amount\":amount, \"type\":adjustType};\n  //   console.log(requestBody)\n  //   console.log(`${this.apiUrl}/${userId}/adjust-balance`)\n  //   return this.http.post<any>(`${this.apiUrl}/${userId}/adjust-balance`, requestBody);\n  // }\n  adjustBalance(userId, amount, adjustType) {\n    const requestBody = {\n      \"amount\": amount,\n      \"type\": adjustType\n    };\n    console.log(this.http.post(`${this.apiUrl}/${userId}/adjust-balance`, requestBody));\n    return this.http.post(`${this.apiUrl}/${userId}/adjust-balance`, requestBody).pipe(map(response => {\n      const statusCode = response.status;\n      return statusCode;\n    }), catchError(error => {\n      console.error('Error:', error);\n      return throwError(error);\n    }));\n  }\n  getAllTransactions() {\n    return this.transactions;\n  }\n  // getTransactionHistory(userId: number, startDate: string , endDate:string): Transaction[] {\n  //   // return this.transactions.filter((transaction) => transaction.userId == userId );\n  //   return this.transactions.filter((transaction) => transaction.userId == userId && transaction.timestamp >= startDate && transaction.timestamp <= endDate);\n  //   ;\n  // }\n  getTransactionHistory(userId, startDate, endDate) {\n    return this.http.get(`${this.apiUrl}/${userId}/transactions`);\n  }\n}\n_class = WalletService;\n_class.ɵfac = function WalletService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["Transaction","catchError","throwError","WalletService","constructor","http","apiUrl","transactions","options","year","month","day","adjustBalance","userId","amount","adjustType","requestBody","console","log","post","pipe","map","response","statusCode","status","error","getAllTransactions","getTransactionHistory","startDate","endDate","get","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Hi\\Desktop\\botit\\admin-wallet-app\\src\\app\\services\\wallet.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Transaction } from '../models/transaction.model';\r\nimport { BalanceAdjustmentResponse } from '../interfaces/BalanceAdjustmentResponse';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { throwError } from 'rxjs';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WalletService {\r\n  private apiUrl = 'http://localhost:3000/users';\r\n  private transactions: Transaction[] = [];\r\n\r\n  constructor(private http: HttpClient) { \r\n    const options = { year: 'numeric', month: '2-digit', day: '2-digit' };\r\n    this.transactions = [\r\n      new Transaction(0, 0, 500, 'deposit', '2023-09-01'),\r\n      new Transaction(1, 0, 200, 'withdrawal', '2023-09-02'),\r\n      new Transaction(2, 1, 1000, 'deposit', '2023-09-01'),\r\n      new Transaction(3, 2, 300, 'deposit', '2023-09-02'),\r\n      new Transaction(4, 2, 400, 'withdrawal', '2023-09-02'),    \r\n      new Transaction(5, 3, 800, 'deposit', '2023-09-01'),\r\n      new Transaction(6, 3, 200, 'withdrawal', '2023-09-02'),\r\n    ]\r\n  }\r\n\r\n  // adjustBalance(userId: string, amount: number, adjustType: 'withdrawal' | 'deposit'): Observable<any> {\r\n  //   const requestBody = { \"amount\":amount, \"type\":adjustType};\r\n  //   console.log(requestBody)\r\n  //   console.log(`${this.apiUrl}/${userId}/adjust-balance`)\r\n  //   return this.http.post<any>(`${this.apiUrl}/${userId}/adjust-balance`, requestBody);\r\n  // }\r\n  adjustBalance(userId: string, amount: number, adjustType: 'withdrawal' | 'deposit'): Observable<any> {\r\n    const requestBody = { \"amount\": amount, \"type\": adjustType };\r\n    console.log( this.http.post<any>(`${this.apiUrl}/${userId}/adjust-balance`, requestBody))\r\n    return this.http.post<any>(`${this.apiUrl}/${userId}/adjust-balance`, requestBody)\r\n      .pipe(\r\n        map((response: HttpResponse<any>) => {\r\n          const statusCode = response.status;\r\n          return statusCode;\r\n        })\r\n        catchError((error) => {\r\n          console.error('Error:', error);\r\n          return throwError(error);\r\n        })\r\n      )\r\n  }\r\n\r\n  getAllTransactions():Transaction[] {\r\n    return this.transactions;\r\n  }\r\n  // getTransactionHistory(userId: number, startDate: string , endDate:string): Transaction[] {\r\n  //   // return this.transactions.filter((transaction) => transaction.userId == userId );\r\n\r\n  //   return this.transactions.filter((transaction) => transaction.userId == userId && transaction.timestamp >= startDate && transaction.timestamp <= endDate);\r\n  //   ;\r\n  // }\r\n\r\n  getTransactionHistory(userId: string, startDate:string , endDate:string): Observable<Transaction[]> {\r\n    return this.http.get<Transaction[]>(`${this.apiUrl}/${userId}/transactions`);\r\n  }\r\n}\r\n"],"mappings":";AAIA,SAASA,WAAW,QAAQ,6BAA6B;AAEzD,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,UAAU,QAAQ,MAAM;;;AAIjC,OAAM,MAAOC,aAAa;EAIxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,MAAM,GAAG,6BAA6B;IACtC,KAAAC,YAAY,GAAkB,EAAE;IAGtC,MAAMC,OAAO,GAAG;MAAEC,IAAI,EAAE,SAAS;MAAEC,KAAK,EAAE,SAAS;MAAEC,GAAG,EAAE;IAAS,CAAE;IACrE,IAAI,CAACJ,YAAY,GAAG,CAClB,IAAIP,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,SAAS,EAAE,YAAY,CAAC,EACnD,IAAIA,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,YAAY,EAAE,YAAY,CAAC,EACtD,IAAIA,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,YAAY,CAAC,EACpD,IAAIA,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,SAAS,EAAE,YAAY,CAAC,EACnD,IAAIA,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,YAAY,EAAE,YAAY,CAAC,EACtD,IAAIA,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,SAAS,EAAE,YAAY,CAAC,EACnD,IAAIA,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,YAAY,EAAE,YAAY,CAAC,CACvD;EACH;EAEA;EACA;EACA;EACA;EACA;EACA;EACAY,aAAaA,CAACC,MAAc,EAAEC,MAAc,EAAEC,UAAoC;IAChF,MAAMC,WAAW,GAAG;MAAE,QAAQ,EAAEF,MAAM;MAAE,MAAM,EAAEC;IAAU,CAAE;IAC5DE,OAAO,CAACC,GAAG,CAAE,IAAI,CAACb,IAAI,CAACc,IAAI,CAAM,GAAG,IAAI,CAACb,MAAM,IAAIO,MAAM,iBAAiB,EAAEG,WAAW,CAAC,CAAC;IACzF,OAAO,IAAI,CAACX,IAAI,CAACc,IAAI,CAAM,GAAG,IAAI,CAACb,MAAM,IAAIO,MAAM,iBAAiB,EAAEG,WAAW,CAAC,CAC/EI,IAAI,CACHC,GAAG,CAAEC,QAA2B,IAAI;MAClC,MAAMC,UAAU,GAAGD,QAAQ,CAACE,MAAM;MAClC,OAAOD,UAAU;IACnB,CAAC,CAAC,EACFtB,UAAU,CAAEwB,KAAK,IAAI;MACnBR,OAAO,CAACQ,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9B,OAAOvB,UAAU,CAACuB,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACL;EAEAC,kBAAkBA,CAAA;IAChB,OAAO,IAAI,CAACnB,YAAY;EAC1B;EACA;EACA;EAEA;EACA;EACA;EAEAoB,qBAAqBA,CAACd,MAAc,EAAEe,SAAgB,EAAGC,OAAc;IACrE,OAAO,IAAI,CAACxB,IAAI,CAACyB,GAAG,CAAgB,GAAG,IAAI,CAACxB,MAAM,IAAIO,MAAM,eAAe,CAAC;EAC9E;;SAnDWV,aAAa;;mBAAbA,MAAa,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAb/B,MAAa;EAAAgC,OAAA,EAAbhC,MAAa,CAAAiC,IAAA;EAAAC,UAAA,EAFZ;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}